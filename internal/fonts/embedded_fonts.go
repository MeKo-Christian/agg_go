// Package fonts provides embedded font data for AGG text rendering.
// This package contains bitmap fonts ported from the original AGG library.
// The fonts use the AGG embedded raster font format and are binary-compatible
// with the original C++ implementation.
package fonts

// Font format specification:
// - Byte 0: Height (pixels)
// - Byte 1: Baseline (pixels from top)
// - Byte 2: Start character (ASCII value)
// - Byte 3: Number of characters
// - Next (num_chars * 2) bytes: Character offset table (little-endian 16-bit offsets)
// - Remaining bytes: Character bitmap data
//
// Each character bitmap starts with a width byte, followed by bitmap rows.
// For characters <= 8 pixels wide, each row is 1 byte.
// For wider characters, multiple bytes per row are used.

// GSE4x6 - 4x6 pixel bitmap font
// Covers ASCII 32-127 (96 characters: space through DEL)
var GSE4x6 = []byte{
	6, 0, 32, 128 - 32,

	0x00, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x15, 0x00, 0x1c, 0x00, 0x23, 0x00, 0x2a, 0x00, 0x31, 0x00, 0x38, 0x00,
	0x3f, 0x00, 0x46, 0x00, 0x4d, 0x00, 0x54, 0x00, 0x5b, 0x00, 0x62, 0x00, 0x69, 0x00, 0x70, 0x00, 0x77, 0x00,
	0x7e, 0x00, 0x85, 0x00, 0x8c, 0x00, 0x93, 0x00, 0x9a, 0x00, 0xa1, 0x00, 0xa8, 0x00, 0xaf, 0x00, 0xb6, 0x00,
	0xbd, 0x00, 0xc4, 0x00, 0xcb, 0x00, 0xd2, 0x00, 0xd9, 0x00, 0xe0, 0x00, 0xe7, 0x00, 0xee, 0x00, 0xf5, 0x00,
	0xfc, 0x00, 0x03, 0x01, 0x0a, 0x01, 0x11, 0x01, 0x18, 0x01, 0x1f, 0x01, 0x26, 0x01, 0x2d, 0x01, 0x34, 0x01,
	0x3b, 0x01, 0x42, 0x01, 0x49, 0x01, 0x50, 0x01, 0x57, 0x01, 0x5e, 0x01, 0x65, 0x01, 0x6c, 0x01, 0x73, 0x01,
	0x7a, 0x01, 0x81, 0x01, 0x88, 0x01, 0x8f, 0x01, 0x96, 0x01, 0x9d, 0x01, 0xa4, 0x01, 0xab, 0x01, 0xb2, 0x01,
	0xb9, 0x01, 0xc0, 0x01, 0xc7, 0x01, 0xce, 0x01, 0xd5, 0x01, 0xdc, 0x01, 0xe3, 0x01, 0xea, 0x01, 0xf1, 0x01,
	0xf8, 0x01, 0xff, 0x01, 0x06, 0x02, 0x0d, 0x02, 0x14, 0x02, 0x1b, 0x02, 0x22, 0x02, 0x29, 0x02, 0x30, 0x02,
	0x37, 0x02, 0x3e, 0x02, 0x45, 0x02, 0x4c, 0x02, 0x53, 0x02, 0x5a, 0x02, 0x61, 0x02, 0x68, 0x02, 0x6f, 0x02,
	0x76, 0x02, 0x7d, 0x02, 0x84, 0x02, 0x8b, 0x02, 0x92, 0x02, 0x99, 0x02,

	4, // 0x20 ' '
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	4, // 0x21 '!'
	0x40, 0x40, 0x40, 0x00, 0x40, 0x00,

	4, // 0x22 '"'
	0xa0, 0xa0, 0x00, 0x00, 0x00, 0x00,

	4, // 0x23 '#'
	0x60, 0xf0, 0x60, 0xf0, 0x60, 0x00,

	4, // 0x24 '$'
	0x40, 0x60, 0xc0, 0x60, 0xc0, 0x40,

	4, // 0x25 '%'
	0xa0, 0x20, 0x40, 0x80, 0xa0, 0x00,

	4, // 0x26 '&'
	0xe0, 0xa0, 0x50, 0xa0, 0xd0, 0x00,

	4, // 0x27 '\''
	0x40, 0x40, 0x00, 0x00, 0x00, 0x00,

	4, // 0x28 '('
	0x20, 0x40, 0x40, 0x40, 0x20, 0x00,

	4, // 0x29 ')'
	0x40, 0x20, 0x20, 0x20, 0x40, 0x00,

	4, // 0x2a '*'
	0xa0, 0x40, 0xe0, 0x40, 0xa0, 0x00,

	4, // 0x2b '+'
	0x40, 0x40, 0xe0, 0x40, 0x40, 0x00,

	4, // 0x2c ','
	0x00, 0x00, 0x00, 0x40, 0x40, 0x80,

	4, // 0x2d '-'
	0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,

	4, // 0x2e '.'
	0x00, 0x00, 0x00, 0x00, 0x40, 0x00,

	4, // 0x2f '/'
	0x10, 0x20, 0x20, 0x40, 0x40, 0x80,

	4, // 0x30 '0'
	0xe0, 0xa0, 0xa0, 0xa0, 0xe0, 0x00,

	4, // 0x31 '1'
	0x40, 0xc0, 0x40, 0x40, 0xe0, 0x00,

	4, // 0x32 '2'
	0xe0, 0xa0, 0x20, 0x40, 0xe0, 0x00,

	4, // 0x33 '3'
	0xe0, 0x20, 0x40, 0x20, 0xe0, 0x00,

	4, // 0x34 '4'
	0xa0, 0xa0, 0xe0, 0x20, 0x20, 0x00,

	4, // 0x35 '5'
	0xe0, 0x80, 0xc0, 0x20, 0xc0, 0x00,

	4, // 0x36 '6'
	0x40, 0x80, 0xe0, 0xa0, 0xe0, 0x00,

	4, // 0x37 '7'
	0xe0, 0xa0, 0x20, 0x40, 0x40, 0x00,

	4, // 0x38 '8'
	0xe0, 0xa0, 0x40, 0xa0, 0xe0, 0x00,

	4, // 0x39 '9'
	0xe0, 0xa0, 0xe0, 0x20, 0xc0, 0x00,

	4, // 0x3a ':'
	0x00, 0x40, 0x00, 0x40, 0x00, 0x00,

	4, // 0x3b ';'
	0x00, 0x40, 0x00, 0x40, 0x40, 0x80,

	4, // 0x3c '<'
	0x20, 0x40, 0x80, 0x40, 0x20, 0x00,

	4, // 0x3d '='
	0x00, 0xe0, 0x00, 0xe0, 0x00, 0x00,

	4, // 0x3e '>'
	0x80, 0x40, 0x20, 0x40, 0x80, 0x00,

	4, // 0x3f '?'
	0xc0, 0x20, 0x40, 0x00, 0x40, 0x00,

	4, // 0x40 '@'
	0x40, 0xa0, 0xe0, 0xe0, 0x80, 0x60,

	4, // 0x41 'A'
	0x40, 0xa0, 0xe0, 0xa0, 0xa0, 0x00,

	4, // 0x42 'B'
	0xc0, 0xa0, 0xc0, 0xa0, 0xc0, 0x00,

	4, // 0x43 'C'
	0x60, 0x80, 0x80, 0x80, 0x60, 0x00,

	4, // 0x44 'D'
	0xc0, 0xa0, 0xa0, 0xa0, 0xc0, 0x00,

	4, // 0x45 'E'
	0xe0, 0x80, 0xc0, 0x80, 0xe0, 0x00,

	4, // 0x46 'F'
	0xe0, 0x80, 0xc0, 0x80, 0x80, 0x00,

	4, // 0x47 'G'
	0x60, 0x80, 0xa0, 0xa0, 0x40, 0x00,

	4, // 0x48 'H'
	0xa0, 0xa0, 0xe0, 0xa0, 0xa0, 0x00,

	4, // 0x49 'I'
	0xe0, 0x40, 0x40, 0x40, 0xe0, 0x00,

	4, // 0x4a 'J'
	0x20, 0x20, 0x20, 0x20, 0xa0, 0x40,

	4, // 0x4b 'K'
	0xa0, 0xa0, 0xc0, 0xc0, 0xa0, 0x00,

	4, // 0x4c 'L'
	0x80, 0x80, 0x80, 0x80, 0xe0, 0x00,

	4, // 0x4d 'M'
	0xa0, 0xe0, 0xa0, 0xa0, 0xa0, 0x00,

	4, // 0x4e 'N'
	0x90, 0xd0, 0xb0, 0x90, 0x90, 0x00,

	4, // 0x4f 'O'
	0x40, 0xa0, 0xa0, 0xa0, 0x40, 0x00,

	4, // 0x50 'P'
	0xc0, 0xa0, 0xa0, 0xc0, 0x80, 0x00,

	4, // 0x51 'Q'
	0x40, 0xa0, 0xa0, 0xa0, 0x60, 0x00,

	4, // 0x52 'R'
	0xc0, 0xa0, 0xa0, 0xc0, 0xa0, 0x00,

	4, // 0x53 'S'
	0x60, 0x80, 0x40, 0x20, 0xc0, 0x00,

	4, // 0x54 'T'
	0xe0, 0x40, 0x40, 0x40, 0x40, 0x00,

	4, // 0x55 'U'
	0xa0, 0xa0, 0xa0, 0xa0, 0xe0, 0x00,

	4, // 0x56 'V'
	0xa0, 0xa0, 0xa0, 0xa0, 0x40, 0x00,

	4, // 0x57 'W'
	0xa0, 0xa0, 0xa0, 0xe0, 0xa0, 0x00,

	4, // 0x58 'X'
	0xa0, 0xa0, 0x40, 0xa0, 0xa0, 0x00,

	4, // 0x59 'Y'
	0xa0, 0xa0, 0x40, 0x40, 0x40, 0x00,

	4, // 0x5a 'Z'
	0xe0, 0x20, 0x40, 0x80, 0xe0, 0x00,

	4, // 0x5b '['
	0x60, 0x40, 0x40, 0x40, 0x60, 0x00,

	4, // 0x5c '\\'
	0x80, 0x40, 0x40, 0x20, 0x20, 0x10,

	4, // 0x5d ']'
	0x60, 0x20, 0x20, 0x20, 0x60, 0x00,

	4, // 0x5e '^'
	0x40, 0xa0, 0x00, 0x00, 0x00, 0x00,

	4, // 0x5f '_'
	0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,

	4, // 0x60 '`'
	0x40, 0x20, 0x00, 0x00, 0x00, 0x00,

	4, // 0x61 'a'
	0x00, 0x60, 0x20, 0x60, 0x60, 0x00,

	4, // 0x62 'b'
	0x80, 0x80, 0xc0, 0xa0, 0xc0, 0x00,

	4, // 0x63 'c'
	0x00, 0x60, 0x80, 0x80, 0x60, 0x00,

	4, // 0x64 'd'
	0x20, 0x20, 0x60, 0xa0, 0x60, 0x00,

	4, // 0x65 'e'
	0x00, 0x60, 0xa0, 0xc0, 0x60, 0x00,

	4, // 0x66 'f'
	0x20, 0x40, 0xe0, 0x40, 0x40, 0x00,

	4, // 0x67 'g'
	0x00, 0x60, 0xa0, 0x60, 0x20, 0xc0,

	4, // 0x68 'h'
	0x80, 0x80, 0xc0, 0xa0, 0xa0, 0x00,

	4, // 0x69 'i'
	0x40, 0x00, 0x40, 0x40, 0x40, 0x00,

	4, // 0x6a 'j'
	0x20, 0x00, 0x20, 0x20, 0x20, 0xc0,

	4, // 0x6b 'k'
	0x80, 0xa0, 0xc0, 0xa0, 0xa0, 0x00,

	4, // 0x6c 'l'
	0x40, 0x40, 0x40, 0x40, 0x20, 0x00,

	4, // 0x6d 'm'
	0x00, 0xa0, 0xe0, 0xa0, 0xa0, 0x00,

	4, // 0x6e 'n'
	0x00, 0xc0, 0xa0, 0xa0, 0xa0, 0x00,

	4, // 0x6f 'o'
	0x00, 0x40, 0xa0, 0xa0, 0x40, 0x00,

	4, // 0x70 'p'
	0x00, 0xc0, 0xa0, 0xc0, 0x80, 0x80,

	4, // 0x71 'q'
	0x00, 0x60, 0xa0, 0x60, 0x20, 0x20,

	4, // 0x72 'r'
	0x00, 0xc0, 0xa0, 0x80, 0x80, 0x00,

	4, // 0x73 's'
	0x00, 0x60, 0xc0, 0x20, 0xc0, 0x00,

	4, // 0x74 't'
	0x40, 0xe0, 0x40, 0x40, 0x20, 0x00,

	4, // 0x75 'u'
	0x00, 0xa0, 0xa0, 0xa0, 0x60, 0x00,

	4, // 0x76 'v'
	0x00, 0xa0, 0xa0, 0xa0, 0x40, 0x00,

	4, // 0x77 'w'
	0x00, 0xa0, 0xa0, 0xe0, 0xa0, 0x00,

	4, // 0x78 'x'
	0x00, 0xa0, 0x40, 0xa0, 0xa0, 0x00,

	4, // 0x79 'y'
	0x00, 0xa0, 0xa0, 0x60, 0x20, 0xc0,

	4, // 0x7a 'z'
	0x00, 0xe0, 0x20, 0x40, 0xe0, 0x00,

	4, // 0x7b '{'
	0x20, 0x40, 0x80, 0x40, 0x20, 0x00,

	4, // 0x7c '|'
	0x40, 0x40, 0x40, 0x40, 0x40, 0x00,

	4, // 0x7d '}'
	0x80, 0x40, 0x20, 0x40, 0x80, 0x00,

	4, // 0x7e '~'
	0x00, 0x50, 0xa0, 0x00, 0x00, 0x00,

	4, // 0x7f DEL
	0xe0, 0xa0, 0xa0, 0xa0, 0xe0, 0x00,
}

// GSE5x7 - 5x7 pixel bitmap font
// Covers ASCII 32-127 (96 characters: space through DEL)
var GSE5x7 = []byte{
	7, 0, 32, 128 - 32,

	0x00, 0x00, 0x08, 0x00, 0x10, 0x00, 0x18, 0x00, 0x20, 0x00, 0x28, 0x00, 0x30, 0x00, 0x38, 0x00, 0x40, 0x00,
	0x48, 0x00, 0x50, 0x00, 0x58, 0x00, 0x60, 0x00, 0x68, 0x00, 0x70, 0x00, 0x78, 0x00, 0x80, 0x00, 0x88, 0x00,
	0x90, 0x00, 0x98, 0x00, 0xa0, 0x00, 0xa8, 0x00, 0xb0, 0x00, 0xb8, 0x00, 0xc0, 0x00, 0xc8, 0x00, 0xd0, 0x00,
	0xd8, 0x00, 0xe0, 0x00, 0xe8, 0x00, 0xf0, 0x00, 0xf8, 0x00, 0x00, 0x01, 0x08, 0x01, 0x10, 0x01, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x30, 0x01, 0x38, 0x01, 0x40, 0x01, 0x48, 0x01, 0x50, 0x01, 0x58, 0x01, 0x60, 0x01,
	0x68, 0x01, 0x70, 0x01, 0x78, 0x01, 0x80, 0x01, 0x88, 0x01, 0x90, 0x01, 0x98, 0x01, 0xa0, 0x01, 0xa8, 0x01,
	0xb0, 0x01, 0xb8, 0x01, 0xc0, 0x01, 0xc8, 0x01, 0xd0, 0x01, 0xd8, 0x01, 0xe0, 0x01, 0xe8, 0x01, 0xf0, 0x01,
	0xf8, 0x01, 0x00, 0x02, 0x08, 0x02, 0x10, 0x02, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x30, 0x02, 0x38, 0x02,
	0x40, 0x02, 0x48, 0x02, 0x50, 0x02, 0x58, 0x02, 0x60, 0x02, 0x68, 0x02, 0x70, 0x02, 0x78, 0x02, 0x80, 0x02,
	0x88, 0x02, 0x90, 0x02, 0x98, 0x02, 0xa0, 0x02, 0xa8, 0x02, 0xb0, 0x02, 0xb8, 0x02, 0xc0, 0x02, 0xc8, 0x02,
	0xd0, 0x02, 0xd8, 0x02, 0xe0, 0x02, 0xe8, 0x02, 0xf0, 0x02, 0xf8, 0x02,

	5, // 0x20 ' '
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	5, // 0x21 '!'
	0x00, 0x20, 0x20, 0x20, 0x00, 0x20, 0x00,

	5, // 0x22 '"'
	0x00, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00,

	5, // 0x23 '#'
	0x00, 0x50, 0xf8, 0x50, 0xf8, 0x50, 0x00,

	5, // 0x24 '$'
	0x20, 0x78, 0xa0, 0x70, 0x28, 0xf0, 0x20,

	5, // 0x25 '%'
	0x00, 0x88, 0x10, 0x20, 0x40, 0x88, 0x00,

	5, // 0x26 '&'
	0x00, 0x40, 0xa0, 0x68, 0x90, 0x68, 0x00,

	5, // 0x27 '\''
	0x00, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00,

	5, // 0x28 '('
	0x10, 0x20, 0x40, 0x40, 0x40, 0x20, 0x10,

	5, // 0x29 ')'
	0x80, 0x40, 0x20, 0x20, 0x20, 0x40, 0x80,

	5, // 0x2a '*'
	0x00, 0x20, 0xa8, 0x70, 0xa8, 0x20, 0x00,

	5, // 0x2b '+'
	0x00, 0x20, 0x20, 0xf8, 0x20, 0x20, 0x00,

	5, // 0x2c ','
	0x00, 0x00, 0x00, 0x00, 0x20, 0x20, 0x40,

	5, // 0x2d '-'
	0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00,

	5, // 0x2e '.'
	0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,

	5, // 0x2f '/'
	0x00, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00,

	5, // 0x30 '0'
	0x00, 0x70, 0x88, 0x88, 0x88, 0x70, 0x00,

	5, // 0x31 '1'
	0x00, 0x20, 0x60, 0x20, 0x20, 0x70, 0x00,

	5, // 0x32 '2'
	0x00, 0x70, 0x88, 0x30, 0x40, 0xf8, 0x00,

	5, // 0x33 '3'
	0x00, 0x70, 0x88, 0x30, 0x88, 0x70, 0x00,

	5, // 0x34 '4'
	0x00, 0x10, 0x30, 0x50, 0xf8, 0x10, 0x00,

	5, // 0x35 '5'
	0x00, 0xf8, 0x80, 0xf0, 0x08, 0xf0, 0x00,

	5, // 0x36 '6'
	0x00, 0x30, 0x40, 0xf0, 0x88, 0x70, 0x00,

	5, // 0x37 '7'
	0x00, 0xf8, 0x08, 0x10, 0x20, 0x40, 0x00,

	5, // 0x38 '8'
	0x00, 0x70, 0x88, 0x70, 0x88, 0x70, 0x00,

	5, // 0x39 '9'
	0x00, 0x70, 0x88, 0x78, 0x10, 0x60, 0x00,

	5, // 0x3a ':'
	0x00, 0x00, 0x20, 0x00, 0x20, 0x00, 0x00,

	5, // 0x3b ';'
	0x00, 0x00, 0x20, 0x00, 0x20, 0x20, 0x40,

	5, // 0x3c '<'
	0x00, 0x18, 0x60, 0x80, 0x60, 0x18, 0x00,

	5, // 0x3d '='
	0x00, 0x00, 0xf8, 0x00, 0xf8, 0x00, 0x00,

	5, // 0x3e '>'
	0x00, 0xc0, 0x30, 0x08, 0x30, 0xc0, 0x00,

	5, // 0x3f '?'
	0x00, 0x70, 0x88, 0x10, 0x20, 0x00, 0x20,

	5, // 0x40 '@'
	0x00, 0x70, 0x88, 0xb8, 0xb0, 0x80, 0x78,

	5, // 0x41 'A'
	0x00, 0x20, 0x50, 0x88, 0xf8, 0x88, 0x00,

	5, // 0x42 'B'
	0x00, 0xf0, 0x88, 0xf0, 0x88, 0xf0, 0x00,

	5, // 0x43 'C'
	0x00, 0x70, 0x88, 0x80, 0x88, 0x70, 0x00,

	5, // 0x44 'D'
	0x00, 0xe0, 0x90, 0x88, 0x90, 0xe0, 0x00,

	5, // 0x45 'E'
	0x00, 0xf8, 0x80, 0xf0, 0x80, 0xf8, 0x00,

	5, // 0x46 'F'
	0x00, 0xf8, 0x80, 0xf0, 0x80, 0x80, 0x00,

	5, // 0x47 'G'
	0x00, 0x70, 0x88, 0x98, 0x88, 0x78, 0x00,

	5, // 0x48 'H'
	0x00, 0x88, 0x88, 0xf8, 0x88, 0x88, 0x00,

	5, // 0x49 'I'
	0x00, 0x70, 0x20, 0x20, 0x20, 0x70, 0x00,

	5, // 0x4a 'J'
	0x00, 0x38, 0x10, 0x10, 0x90, 0x60, 0x00,

	5, // 0x4b 'K'
	0x00, 0x88, 0x90, 0xe0, 0x90, 0x88, 0x00,

	5, // 0x4c 'L'
	0x00, 0x80, 0x80, 0x80, 0x80, 0xf8, 0x00,

	5, // 0x4d 'M'
	0x00, 0x88, 0xd8, 0xa8, 0x88, 0x88, 0x00,

	5, // 0x4e 'N'
	0x00, 0x88, 0xc8, 0xa8, 0x98, 0x88, 0x00,

	5, // 0x4f 'O'
	0x00, 0x70, 0x88, 0x88, 0x88, 0x70, 0x00,

	5, // 0x50 'P'
	0x00, 0xf0, 0x88, 0xf0, 0x80, 0x80, 0x00,

	5, // 0x51 'Q'
	0x00, 0x70, 0x88, 0xa8, 0x90, 0x68, 0x00,

	5, // 0x52 'R'
	0x00, 0xf0, 0x88, 0xf0, 0x90, 0x88, 0x00,

	5, // 0x53 'S'
	0x00, 0x70, 0x80, 0x70, 0x08, 0x70, 0x00,

	5, // 0x54 'T'
	0x00, 0xf8, 0x20, 0x20, 0x20, 0x20, 0x00,

	5, // 0x55 'U'
	0x00, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00,

	5, // 0x56 'V'
	0x00, 0x88, 0x88, 0x50, 0x50, 0x20, 0x00,

	5, // 0x57 'W'
	0x00, 0x88, 0x88, 0xa8, 0xd8, 0x88, 0x00,

	5, // 0x58 'X'
	0x00, 0x88, 0x50, 0x20, 0x50, 0x88, 0x00,

	5, // 0x59 'Y'
	0x00, 0x88, 0x50, 0x20, 0x20, 0x20, 0x00,

	5, // 0x5a 'Z'
	0x00, 0xf8, 0x10, 0x20, 0x40, 0xf8, 0x00,

	5, // 0x5b '['
	0x00, 0x70, 0x40, 0x40, 0x40, 0x70, 0x00,

	5, // 0x5c '\\'
	0x00, 0x80, 0x40, 0x20, 0x10, 0x08, 0x00,

	5, // 0x5d ']'
	0x00, 0x70, 0x10, 0x10, 0x10, 0x70, 0x00,

	5, // 0x5e '^'
	0x00, 0x20, 0x50, 0x88, 0x00, 0x00, 0x00,

	5, // 0x5f '_'
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8,

	5, // 0x60 '`'
	0x00, 0x40, 0x20, 0x00, 0x00, 0x00, 0x00,

	5, // 0x61 'a'
	0x00, 0x00, 0x70, 0x08, 0x78, 0x88, 0x78,

	5, // 0x62 'b'
	0x00, 0x80, 0x80, 0xf0, 0x88, 0xf0, 0x00,

	5, // 0x63 'c'
	0x00, 0x00, 0x70, 0x80, 0x80, 0x70, 0x00,

	5, // 0x64 'd'
	0x00, 0x08, 0x08, 0x78, 0x88, 0x78, 0x00,

	5, // 0x65 'e'
	0x00, 0x00, 0x70, 0x88, 0xf0, 0x80, 0x70,

	5, // 0x66 'f'
	0x00, 0x30, 0x48, 0xf0, 0x40, 0x40, 0x00,

	5, // 0x67 'g'
	0x00, 0x00, 0x78, 0x88, 0x78, 0x08, 0x70,

	5, // 0x68 'h'
	0x00, 0x80, 0x80, 0xf0, 0x88, 0x88, 0x00,

	5, // 0x69 'i'
	0x00, 0x20, 0x00, 0x60, 0x20, 0x70, 0x00,

	5, // 0x6a 'j'
	0x00, 0x10, 0x00, 0x30, 0x10, 0x90, 0x60,

	5, // 0x6b 'k'
	0x00, 0x80, 0x88, 0x90, 0xe0, 0x90, 0x88,

	5, // 0x6c 'l'
	0x00, 0x60, 0x20, 0x20, 0x20, 0x70, 0x00,

	5, // 0x6d 'm'
	0x00, 0x00, 0xd0, 0xa8, 0xa8, 0xa8, 0x00,

	5, // 0x6e 'n'
	0x00, 0x00, 0xf0, 0x88, 0x88, 0x88, 0x00,

	5, // 0x6f 'o'
	0x00, 0x00, 0x70, 0x88, 0x88, 0x70, 0x00,

	5, // 0x70 'p'
	0x00, 0x00, 0xf0, 0x88, 0xf0, 0x80, 0x80,

	5, // 0x71 'q'
	0x00, 0x00, 0x78, 0x88, 0x78, 0x08, 0x08,

	5, // 0x72 'r'
	0x00, 0x00, 0xb8, 0xc0, 0x80, 0x80, 0x00,

	5, // 0x73 's'
	0x00, 0x00, 0x78, 0x80, 0x70, 0x08, 0xf0,

	5, // 0x74 't'
	0x00, 0x40, 0xf0, 0x40, 0x48, 0x30, 0x00,

	5, // 0x75 'u'
	0x00, 0x00, 0x88, 0x88, 0x98, 0x68, 0x00,

	5, // 0x76 'v'
	0x00, 0x00, 0x88, 0x88, 0x50, 0x20, 0x00,

	5, // 0x77 'w'
	0x00, 0x00, 0x88, 0xa8, 0xa8, 0x50, 0x00,

	5, // 0x78 'x'
	0x00, 0x00, 0x88, 0x50, 0x20, 0x50, 0x88,

	5, // 0x79 'y'
	0x00, 0x00, 0x88, 0x88, 0x78, 0x08, 0x70,

	5, // 0x7a 'z'
	0x00, 0x00, 0xf8, 0x10, 0x20, 0x40, 0xf8,

	5, // 0x7b '{'
	0x00, 0x18, 0x20, 0x60, 0x20, 0x18, 0x00,

	5, // 0x7c '|'
	0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,

	5, // 0x7d '}'
	0x00, 0xc0, 0x20, 0x30, 0x20, 0xc0, 0x00,

	5, // 0x7e '~'
	0x00, 0x00, 0x40, 0xa8, 0x10, 0x00, 0x00,

	5, // 0x7f DEL
	0x00, 0x70, 0x88, 0x88, 0x88, 0x70, 0x00,
}

// MCS5x10Mono - 5x10 pixel monospace bitmap font
// Covers ASCII 32-127 (96 characters: space through DEL)
var MCS5x10Mono = []byte{
	10, 2, 32, 128 - 32,

	0x00, 0x00, 0x0B, 0x00, 0x16, 0x00, 0x21, 0x00, 0x2C, 0x00, 0x37, 0x00, 0x42, 0x00, 0x4D, 0x00, 0x58, 0x00,
	0x63, 0x00, 0x6E, 0x00, 0x79, 0x00, 0x84, 0x00, 0x8F, 0x00, 0x9A, 0x00, 0xA5, 0x00, 0xB0, 0x00, 0xBB, 0x00,
	0xC6, 0x00, 0xD1, 0x00, 0xDC, 0x00, 0xE7, 0x00, 0xF2, 0x00, 0xFD, 0x00, 0x08, 0x01, 0x13, 0x01, 0x1E, 0x01,
	0x29, 0x01, 0x34, 0x01, 0x3F, 0x01, 0x4A, 0x01, 0x55, 0x01, 0x60, 0x01, 0x6B, 0x01, 0x76, 0x01, 0x81, 0x01,
	0x8C, 0x01, 0x97, 0x01, 0xA2, 0x01, 0xAD, 0x01, 0xB8, 0x01, 0xC3, 0x01, 0xCE, 0x01, 0xD9, 0x01, 0xE4, 0x01,
	0xEF, 0x01, 0xFA, 0x01, 0x05, 0x02, 0x10, 0x02, 0x1B, 0x02, 0x26, 0x02, 0x31, 0x02, 0x3C, 0x02, 0x47, 0x02,
	0x52, 0x02, 0x5D, 0x02, 0x68, 0x02, 0x73, 0x02, 0x7E, 0x02, 0x89, 0x02, 0x94, 0x02, 0x9F, 0x02, 0xAA, 0x02,
	0xB5, 0x02, 0xC0, 0x02, 0xCB, 0x02, 0xD6, 0x02, 0xE1, 0x02, 0xEC, 0x02, 0xF7, 0x02, 0x02, 0x03, 0x0D, 0x03,
	0x18, 0x03, 0x23, 0x03, 0x2E, 0x03, 0x39, 0x03, 0x44, 0x03, 0x4F, 0x03, 0x5A, 0x03, 0x65, 0x03, 0x70, 0x03,
	0x7B, 0x03, 0x86, 0x03, 0x91, 0x03, 0x9C, 0x03, 0xA7, 0x03, 0xB2, 0x03, 0xBD, 0x03, 0xC8, 0x03, 0xD3, 0x03,
	0xDE, 0x03, 0xE9, 0x03, 0xF4, 0x03, 0xFF, 0x03, 0x0A, 0x04, 0x15, 0x04,

	5, // 0x20 ' '
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	5, // 0x21 '!'
	0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x00,

	5, // 0x22 '"'
	0x00, 0x50, 0x50, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	5, // 0x23 '#'
	0x00, 0x50, 0x50, 0xF8, 0x50, 0x50, 0x50, 0xF8, 0x50, 0x50,

	5, // 0x24 '$'
	0x00, 0x40, 0x60, 0x90, 0x80, 0x60, 0x10, 0x90, 0x60, 0x20,

	5, // 0x25 '%'
	0x00, 0x88, 0xA8, 0x90, 0x10, 0x20, 0x40, 0x48, 0x54, 0x88,

	5, // 0x26 '&'
	0x00, 0x40, 0xA0, 0xA0, 0xA0, 0x40, 0xA8, 0x90, 0x90, 0x68,

	5, // 0x27 '\''
	0x00, 0x20, 0x20, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	5, // 0x28 '('
	0x00, 0x10, 0x20, 0x40, 0x40, 0x40, 0x40, 0x40, 0x20, 0x10,

	5, // 0x29 ')'
	0x00, 0x80, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x40, 0x80,

	5, // 0x2a '*'
	0x00, 0x20, 0xA8, 0x70, 0x20, 0x70, 0xA8, 0x20, 0x00, 0x00,

	5, // 0x2b '+'
	0x00, 0x00, 0x20, 0x20, 0x20, 0xF8, 0x20, 0x20, 0x20, 0x00,

	5, // 0x2c ','
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x20, 0x40,

	5, // 0x2d '-'
	0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x00, 0x00,

	5, // 0x2e '.'
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,

	5, // 0x2f '/'
	0x00, 0x08, 0x08, 0x10, 0x10, 0x20, 0x20, 0x40, 0x40, 0x80,

	5, // 0x30 '0'
	0x00, 0x70, 0x88, 0x98, 0xA8, 0xA8, 0xC8, 0x88, 0x70, 0x00,

	5, // 0x31 '1'
	0x00, 0x20, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00,

	5, // 0x32 '2'
	0x00, 0x70, 0x88, 0x08, 0x08, 0x30, 0x40, 0x80, 0xF8, 0x00,

	5, // 0x33 '3'
	0x00, 0xF8, 0x08, 0x10, 0x30, 0x08, 0x08, 0x88, 0x70, 0x00,

	5, // 0x34 '4'
	0x00, 0x10, 0x30, 0x50, 0x90, 0x90, 0xF8, 0x10, 0x10, 0x00,

	5, // 0x35 '5'
	0x00, 0xF8, 0x80, 0x80, 0xF0, 0x08, 0x08, 0x88, 0x70, 0x00,

	5, // 0x36 '6'
	0x00, 0x30, 0x40, 0x80, 0x80, 0xF0, 0x88, 0x88, 0x70, 0x00,

	5, // 0x37 '7'
	0x00, 0xF8, 0x08, 0x10, 0x10, 0x20, 0x20, 0x40, 0x40, 0x00,

	5, // 0x38 '8'
	0x00, 0x70, 0x88, 0x88, 0x88, 0x70, 0x88, 0x88, 0x70, 0x00,

	5, // 0x39 '9'
	0x00, 0x70, 0x88, 0x88, 0x78, 0x08, 0x08, 0x10, 0x60, 0x00,

	5, // 0x3a ':'
	0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,

	5, // 0x3b ';'
	0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x30, 0x20, 0x40,

	5, // 0x3c '<'
	0x00, 0x00, 0x18, 0x60, 0x80, 0x80, 0x60, 0x18, 0x00, 0x00,

	5, // 0x3d '='
	0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0xF8, 0x00, 0x00, 0x00,

	5, // 0x3e '>'
	0x00, 0x00, 0xC0, 0x30, 0x08, 0x08, 0x30, 0xC0, 0x00, 0x00,

	5, // 0x3f '?'
	0x00, 0x70, 0x88, 0x88, 0x08, 0x10, 0x20, 0x00, 0x20, 0x00,

	5, // 0x40 '@'
	0x00, 0x70, 0x88, 0x88, 0xB8, 0xA8, 0xB8, 0x80, 0x78, 0x00,

	5, // 0x41 'A'
	0x00, 0x70, 0x88, 0x88, 0x88, 0x88, 0xF8, 0x88, 0x88, 0x00,

	5, // 0x42 'B'
	0x00, 0xF0, 0x88, 0x88, 0x88, 0xF0, 0x88, 0x88, 0xF0, 0x00,

	5, // 0x43 'C'
	0x00, 0x70, 0x88, 0x80, 0x80, 0x80, 0x80, 0x88, 0x70, 0x00,

	5, // 0x44 'D'
	0x00, 0xF0, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0xF0, 0x00,

	5, // 0x45 'E'
	0x00, 0xF8, 0x80, 0x80, 0x80, 0xF0, 0x80, 0x80, 0xF8, 0x00,

	5, // 0x46 'F'
	0x00, 0xF8, 0x80, 0x80, 0x80, 0xF0, 0x80, 0x80, 0x80, 0x00,

	5, // 0x47 'G'
	0x00, 0x70, 0x88, 0x80, 0x80, 0x98, 0x88, 0x88, 0x78, 0x00,

	5, // 0x48 'H'
	0x00, 0x88, 0x88, 0x88, 0x88, 0xF8, 0x88, 0x88, 0x88, 0x00,

	5, // 0x49 'I'
	0x00, 0x70, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00,

	5, // 0x4a 'J'
	0x00, 0x38, 0x10, 0x10, 0x10, 0x10, 0x10, 0x90, 0x60, 0x00,

	5, // 0x4b 'K'
	0x00, 0x88, 0x90, 0xA0, 0xC0, 0xC0, 0xA0, 0x90, 0x88, 0x00,

	5, // 0x4c 'L'
	0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xF8, 0x00,

	5, // 0x4d 'M'
	0x00, 0x88, 0xD8, 0xA8, 0xA8, 0x88, 0x88, 0x88, 0x88, 0x00,

	5, // 0x4e 'N'
	0x00, 0x88, 0x88, 0xC8, 0xA8, 0xA8, 0x98, 0x88, 0x88, 0x00,

	5, // 0x4f 'O'
	0x00, 0x70, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00,

	5, // 0x50 'P'
	0x00, 0xF0, 0x88, 0x88, 0x88, 0xF0, 0x80, 0x80, 0x80, 0x00,

	5, // 0x51 'Q'
	0x00, 0x70, 0x88, 0x88, 0x88, 0x88, 0xA8, 0x90, 0x68, 0x00,

	5, // 0x52 'R'
	0x00, 0xF0, 0x88, 0x88, 0x88, 0xF0, 0xA0, 0x90, 0x88, 0x00,

	5, // 0x53 'S'
	0x00, 0x70, 0x88, 0x80, 0x80, 0x70, 0x08, 0x88, 0x70, 0x00,

	5, // 0x54 'T'
	0x00, 0xF8, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,

	5, // 0x55 'U'
	0x00, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00,

	5, // 0x56 'V'
	0x00, 0x88, 0x88, 0x88, 0x88, 0x50, 0x50, 0x20, 0x20, 0x00,

	5, // 0x57 'W'
	0x00, 0x88, 0x88, 0x88, 0x88, 0xA8, 0xA8, 0xD8, 0x88, 0x00,

	5, // 0x58 'X'
	0x00, 0x88, 0x88, 0x50, 0x20, 0x20, 0x50, 0x88, 0x88, 0x00,

	5, // 0x59 'Y'
	0x00, 0x88, 0x88, 0x50, 0x50, 0x20, 0x20, 0x20, 0x20, 0x00,

	5, // 0x5a 'Z'
	0x00, 0xF8, 0x08, 0x10, 0x10, 0x20, 0x40, 0x80, 0xF8, 0x00,

	5, // 0x5b '['
	0x00, 0x70, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x70, 0x00,

	5, // 0x5c '\\'
	0x00, 0x80, 0x80, 0x40, 0x40, 0x20, 0x20, 0x10, 0x10, 0x08,

	5, // 0x5d ']'
	0x00, 0x70, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x70, 0x00,

	5, // 0x5e '^'
	0x00, 0x20, 0x50, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	5, // 0x5f '_'
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8,

	5, // 0x60 '`'
	0x00, 0x40, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

	5, // 0x61 'a'
	0x00, 0x00, 0x00, 0x70, 0x08, 0x08, 0x78, 0x88, 0x78, 0x00,

	5, // 0x62 'b'
	0x00, 0x80, 0x80, 0x80, 0xF0, 0x88, 0x88, 0x88, 0xF0, 0x00,

	5, // 0x63 'c'
	0x00, 0x00, 0x00, 0x78, 0x80, 0x80, 0x80, 0x80, 0x78, 0x00,

	5, // 0x64 'd'
	0x00, 0x08, 0x08, 0x08, 0x78, 0x88, 0x88, 0x88, 0x78, 0x00,

	5, // 0x65 'e'
	0x00, 0x00, 0x00, 0x70, 0x88, 0x88, 0xF8, 0x80, 0x78, 0x00,

	5, // 0x66 'f'
	0x00, 0x30, 0x48, 0x40, 0x40, 0xF0, 0x40, 0x40, 0x40, 0x00,

	5, // 0x67 'g'
	0x00, 0x00, 0x00, 0x78, 0x88, 0x88, 0x88, 0x78, 0x08, 0x70,

	5, // 0x68 'h'
	0x00, 0x80, 0x80, 0x80, 0xF0, 0x88, 0x88, 0x88, 0x88, 0x00,

	5, // 0x69 'i'
	0x00, 0x20, 0x00, 0x00, 0x60, 0x20, 0x20, 0x20, 0x70, 0x00,

	5, // 0x6a 'j'
	0x00, 0x10, 0x00, 0x00, 0x30, 0x10, 0x10, 0x10, 0x90, 0x60,

	5, // 0x6b 'k'
	0x00, 0x80, 0x80, 0x80, 0x88, 0x90, 0xE0, 0x90, 0x88, 0x00,

	5, // 0x6c 'l'
	0x00, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00,

	5, // 0x6d 'm'
	0x00, 0x00, 0x00, 0xD0, 0xA8, 0xA8, 0xA8, 0x88, 0x88, 0x00,

	5, // 0x6e 'n'
	0x00, 0x00, 0x00, 0xF0, 0x88, 0x88, 0x88, 0x88, 0x88, 0x00,

	5, // 0x6f 'o'
	0x00, 0x00, 0x00, 0x70, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00,

	5, // 0x70 'p'
	0x00, 0x00, 0x00, 0xF0, 0x88, 0x88, 0x88, 0xF0, 0x80, 0x80,

	5, // 0x71 'q'
	0x00, 0x00, 0x00, 0x78, 0x88, 0x88, 0x88, 0x78, 0x08, 0x08,

	5, // 0x72 'r'
	0x00, 0x00, 0x00, 0xB8, 0xC0, 0x80, 0x80, 0x80, 0x80, 0x00,

	5, // 0x73 's'
	0x00, 0x00, 0x00, 0x78, 0x80, 0x70, 0x08, 0x08, 0xF0, 0x00,

	5, // 0x74 't'
	0x00, 0x40, 0x40, 0x40, 0xF0, 0x40, 0x40, 0x48, 0x30, 0x00,

	5, // 0x75 'u'
	0x00, 0x00, 0x00, 0x88, 0x88, 0x88, 0x88, 0x98, 0x68, 0x00,

	5, // 0x76 'v'
	0x00, 0x00, 0x00, 0x88, 0x88, 0x88, 0x50, 0x50, 0x20, 0x00,

	5, // 0x77 'w'
	0x00, 0x00, 0x00, 0x88, 0x88, 0x88, 0xA8, 0xD8, 0x88, 0x00,

	5, // 0x78 'x'
	0x00, 0x00, 0x00, 0x88, 0x50, 0x20, 0x20, 0x50, 0x88, 0x00,

	5, // 0x79 'y'
	0x00, 0x00, 0x00, 0x88, 0x88, 0x88, 0x88, 0x78, 0x08, 0x70,

	5, // 0x7a 'z'
	0x00, 0x00, 0x00, 0xF8, 0x08, 0x30, 0x40, 0x80, 0xF8, 0x00,

	5, // 0x7b '{'
	0x00, 0x18, 0x20, 0x20, 0x20, 0xC0, 0x20, 0x20, 0x18, 0x00,

	5, // 0x7c '|'
	0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,

	5, // 0x7d '}'
	0x00, 0xC0, 0x20, 0x20, 0x20, 0x18, 0x20, 0x20, 0xC0, 0x00,

	5, // 0x7e '~'
	0x00, 0x00, 0x00, 0x60, 0x92, 0x0C, 0x00, 0x00, 0x00, 0x00,

	5, // 0x7f DEL
	0x00, 0x70, 0x88, 0x88, 0x88, 0x88, 0x88, 0x70, 0x00, 0x00,
}

// Verdana12 - 12pt Verdana bitmap font
// Covers ASCII 32-127 (96 characters: space through DEL)
var Verdana12 = []byte{
	0x0C, 0x03, 0x20, 0x60, 0x00, 0x00, 0x0D, 0x00, 0x1A, 0x00, 0x27, 0x00, 0x34, 0x00, 0x41, 0x00,
	0x5A, 0x00, 0x67, 0x00, 0x74, 0x00, 0x81, 0x00, 0x8E, 0x00, 0x9B, 0x00, 0xA8, 0x00, 0xB5, 0x00,
	0xC2, 0x00, 0xCF, 0x00, 0xDC, 0x00, 0xE9, 0x00, 0xF6, 0x00, 0x03, 0x01, 0x10, 0x01, 0x1D, 0x01,
	0x2A, 0x01, 0x37, 0x01, 0x44, 0x01, 0x51, 0x01, 0x5E, 0x01, 0x6B, 0x01, 0x78, 0x01, 0x85, 0x01,
	0x92, 0x01, 0x9F, 0x01, 0xAC, 0x01, 0xC5, 0x01, 0xD2, 0x01, 0xDF, 0x01, 0xEC, 0x01, 0xF9, 0x01,
	0x06, 0x02, 0x13, 0x02, 0x20, 0x02, 0x2D, 0x02, 0x3A, 0x02, 0x47, 0x02, 0x54, 0x02, 0x61, 0x02,
	0x7A, 0x02, 0x87, 0x02, 0xA0, 0x02, 0xAD, 0x02, 0xC6, 0x02, 0xD3, 0x02, 0xE0, 0x02, 0xED, 0x02,
	0xFA, 0x02, 0x07, 0x03, 0x20, 0x03, 0x2D, 0x03, 0x3A, 0x03, 0x47, 0x03, 0x54, 0x03, 0x61, 0x03,
	0x6E, 0x03, 0x7B, 0x03, 0x88, 0x03, 0x95, 0x03, 0xA2, 0x03, 0xAF, 0x03, 0xBC, 0x03, 0xC9, 0x03,
	0xD6, 0x03, 0xE3, 0x03, 0xF0, 0x03, 0xFD, 0x03, 0x0A, 0x04, 0x17, 0x04, 0x24, 0x04, 0x31, 0x04,
	0x4A, 0x04, 0x57, 0x04, 0x64, 0x04, 0x71, 0x04, 0x7E, 0x04, 0x8B, 0x04, 0x98, 0x04, 0xA5, 0x04,
	0xB2, 0x04, 0xBF, 0x04, 0xCC, 0x04, 0xD9, 0x04, 0xE6, 0x04, 0xF3, 0x04, 0x00, 0x05, 0x0D, 0x05,
	0x1A, 0x05, 0x27, 0x05, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x05, 0x00, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x20, 0x00, 0x00, 0x05, 0x00,
	0x00, 0x50, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00,
	0x28, 0x7C, 0x28, 0x7C, 0x28, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x10, 0x10, 0x3C, 0x50, 0x30,
	0x18, 0x14, 0x78, 0x10, 0x10, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x00, 0x4A, 0x00,
	0x4A, 0x00, 0x35, 0x80, 0x0A, 0x40, 0x0A, 0x40, 0x11, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00,
	0x00, 0x00, 0x30, 0x48, 0x48, 0x32, 0x4A, 0x44, 0x3A, 0x00, 0x00, 0x03, 0x00, 0x00, 0x40, 0x40,
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x10, 0x20, 0x40, 0x40, 0x40,
	0x40, 0x40, 0x40, 0x20, 0x10, 0x04, 0x00, 0x00, 0x80, 0x40, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x40, 0x80, 0x07, 0x00, 0x10, 0x54, 0x38, 0x54, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07,
	0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x7C, 0x10, 0x10, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x80, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
	0x40, 0x00, 0x00, 0x04, 0x00, 0x00, 0x10, 0x10, 0x20, 0x20, 0x40, 0x40, 0x40, 0x80, 0x80, 0x00,
	0x07, 0x00, 0x00, 0x00, 0x38, 0x44, 0x44, 0x44, 0x44, 0x44, 0x38, 0x00, 0x00, 0x07, 0x00, 0x00,
	0x00, 0x10, 0x30, 0x10, 0x10, 0x10, 0x10, 0x38, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x38, 0x44,
	0x04, 0x08, 0x10, 0x20, 0x7C, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x38, 0x44, 0x04, 0x18, 0x04,
	0x44, 0x38, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x18, 0x28, 0x48, 0x7C, 0x08, 0x08, 0x00,
	0x00, 0x07, 0x00, 0x00, 0x00, 0x7C, 0x40, 0x78, 0x04, 0x04, 0x44, 0x38, 0x00, 0x00, 0x07, 0x00,
	0x00, 0x00, 0x18, 0x20, 0x40, 0x78, 0x44, 0x44, 0x38, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7C,
	0x04, 0x08, 0x08, 0x10, 0x10, 0x10, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x38, 0x44, 0x44, 0x38,
	0x44, 0x44, 0x38, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x38, 0x44, 0x44, 0x3C, 0x04, 0x08, 0x30,
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x40, 0x40, 0x00, 0x00, 0x04,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x00, 0x40, 0x40, 0x80, 0x00, 0x07, 0x00, 0x00, 0x00,
	0x00, 0x04, 0x18, 0x60, 0x18, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C,
	0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x40, 0x30, 0x0C, 0x30, 0x40,
	0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x70, 0x08, 0x08, 0x10, 0x20, 0x00, 0x20, 0x00, 0x00,
	0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x20, 0x80, 0x4E, 0x80, 0x52, 0x80, 0x52,
	0x80, 0x4D, 0x00, 0x20, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x18, 0x18, 0x24,
	0x24, 0x7E, 0x42, 0x42, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x70, 0x48, 0x48, 0x78, 0x44, 0x44,
	0x78, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1C, 0x22, 0x40, 0x40, 0x40, 0x22, 0x1C, 0x00, 0x00,
	0x08, 0x00, 0x00, 0x00, 0x78, 0x44, 0x42, 0x42, 0x42, 0x44, 0x78, 0x00, 0x00, 0x07, 0x00, 0x00,
	0x00, 0x7C, 0x40, 0x40, 0x78, 0x40, 0x40, 0x7C, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x7C, 0x40,
	0x40, 0x78, 0x40, 0x40, 0x40, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1C, 0x22, 0x40, 0x4E, 0x42,
	0x22, 0x1C, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x42, 0x42, 0x42, 0x7E, 0x42, 0x42, 0x42, 0x00,
	0x00, 0x05, 0x00, 0x00, 0x00, 0x70, 0x20, 0x20, 0x20, 0x20, 0x20, 0x70, 0x00, 0x00, 0x05, 0x00,
	0x00, 0x00, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0xE0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x44,
	0x48, 0x50, 0x60, 0x50, 0x48, 0x44, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40,
	0x40, 0x40, 0x7C, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x00, 0x63, 0x00,
	0x55, 0x00, 0x55, 0x00, 0x49, 0x00, 0x49, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
	0x00, 0x00, 0x42, 0x62, 0x52, 0x4A, 0x46, 0x42, 0x42, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x1C, 0x00, 0x22, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00, 0x22, 0x00, 0x1C, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x78, 0x44, 0x44, 0x44, 0x78, 0x40, 0x40, 0x00,
	0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x22, 0x00, 0x41, 0x00, 0x41, 0x00,
	0x41, 0x00, 0x22, 0x00, 0x1C, 0x00, 0x04, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x78, 0x44,
	0x44, 0x78, 0x50, 0x48, 0x44, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x38, 0x44, 0x40, 0x38, 0x04,
	0x44, 0x38, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0xFE, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00,
	0x00, 0x08, 0x00, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3C, 0x00, 0x00, 0x08, 0x00,
	0x00, 0x00, 0x42, 0x42, 0x42, 0x24, 0x24, 0x18, 0x18, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x41, 0x00, 0x49, 0x00, 0x49, 0x00, 0x55, 0x00, 0x55, 0x00, 0x22, 0x00, 0x22, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x44, 0x44, 0x28, 0x10, 0x28, 0x44, 0x44, 0x00,
	0x00, 0x07, 0x00, 0x00, 0x00, 0x44, 0x44, 0x28, 0x28, 0x10, 0x10, 0x10, 0x00, 0x00, 0x07, 0x00,
	0x00, 0x00, 0x7C, 0x04, 0x08, 0x10, 0x20, 0x40, 0x7C, 0x00, 0x00, 0x04, 0x00, 0x00, 0x60, 0x40,
	0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x60, 0x04, 0x00, 0x00, 0x80, 0x80, 0x40, 0x40, 0x40,
	0x20, 0x20, 0x10, 0x10, 0x00, 0x04, 0x00, 0x00, 0x60, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x60, 0x07, 0x00, 0x00, 0x00, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x06, 0x00, 0x00, 0x20,
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30,
	0x08, 0x38, 0x48, 0x38, 0x00, 0x00, 0x06, 0x00, 0x00, 0x40, 0x40, 0x40, 0x70, 0x48, 0x48, 0x48,
	0x70, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x40, 0x40, 0x40, 0x38, 0x00, 0x00,
	0x06, 0x00, 0x00, 0x08, 0x08, 0x08, 0x38, 0x48, 0x48, 0x48, 0x38, 0x00, 0x00, 0x06, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x30, 0x48, 0x78, 0x40, 0x38, 0x00, 0x00, 0x04, 0x00, 0x00, 0x30, 0x40, 0x40,
	0xE0, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x48, 0x48,
	0x48, 0x38, 0x08, 0x30, 0x06, 0x00, 0x00, 0x40, 0x40, 0x40, 0x70, 0x48, 0x48, 0x48, 0x48, 0x00,
	0x00, 0x03, 0x00, 0x00, 0x00, 0x40, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x00, 0x03, 0x00,
	0x00, 0x00, 0x40, 0x00, 0xC0, 0x40, 0x40, 0x40, 0x40, 0x40, 0x80, 0x06, 0x00, 0x00, 0x40, 0x40,
	0x40, 0x48, 0x50, 0x60, 0x50, 0x48, 0x00, 0x00, 0x03, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x40,
	0x40, 0x40, 0x40, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x76, 0x00, 0x49, 0x00, 0x49, 0x00, 0x49, 0x00, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x70, 0x48, 0x48, 0x48, 0x48, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x30, 0x48, 0x48, 0x48, 0x30, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x48,
	0x48, 0x48, 0x70, 0x40, 0x40, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x48, 0x48, 0x48, 0x38,
	0x08, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x60, 0x40, 0x40, 0x40, 0x00, 0x00, 0x06,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x40, 0x30, 0x08, 0x70, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
	0x00, 0x40, 0xF0, 0x40, 0x40, 0x40, 0x30, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48,
	0x48, 0x48, 0x48, 0x38, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x30,
	0x30, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x54, 0x54, 0x28, 0x28, 0x00, 0x00,
	0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x48, 0x30, 0x48, 0x48, 0x00, 0x00, 0x06, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x48, 0x48, 0x48, 0x30, 0x10, 0x20, 0x20, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x70, 0x10, 0x20, 0x40, 0x70, 0x00, 0x00, 0x06, 0x00, 0x00, 0x18, 0x20, 0x20, 0x20, 0x20, 0xC0,
	0x20, 0x20, 0x20, 0x18, 0x05, 0x00, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x06, 0x00, 0x00, 0x60, 0x10, 0x10, 0x10, 0x10, 0x0C, 0x10, 0x10, 0x10, 0x60, 0x07, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x58, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x7F, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00, 0x41, 0x00, 0x7F, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00,
}

// GetGSE4x6 returns the GSE 4x6 pixel bitmap font data
func GetGSE4x6() []byte {
	// Return a copy to prevent modification of the original data
	result := make([]byte, len(GSE4x6))
	copy(result, GSE4x6)
	return result
}

// GetGSE5x7 returns the GSE 5x7 pixel bitmap font data
func GetGSE5x7() []byte {
	// Return a copy to prevent modification of the original data
	result := make([]byte, len(GSE5x7))
	copy(result, GSE5x7)
	return result
}

// GetGSE4x8 returns the GSE 4x8 pixel bitmap font data
// TODO: Implement GSE4x8 font data
func GetGSE4x8() []byte {
	// For now, return GSE4x6 as placeholder
	return GetGSE4x6()
}

// GetGSE5x9 returns the GSE 5x9 pixel bitmap font data
// TODO: Implement GSE5x9 font data
func GetGSE5x9() []byte {
	// For now, return GSE5x7 as placeholder
	return GetGSE5x7()
}

// GetGSE6x9 returns the GSE 6x9 pixel bitmap font data
// TODO: Implement GSE6x9 font data
func GetGSE6x9() []byte {
	// For now, return GSE5x7 as placeholder
	return GetGSE5x7()
}

// GetGSE6x12 returns the GSE 6x12 pixel bitmap font data
// TODO: Implement GSE6x12 font data
func GetGSE6x12() []byte {
	// For now, return GSE5x7 as placeholder
	return GetGSE5x7()
}

// GetGSE7x11 returns the GSE 7x11 pixel bitmap font data
// TODO: Implement GSE7x11 font data
func GetGSE7x11() []byte {
	// For now, return GSE5x7 as placeholder
	return GetGSE5x7()
}

// GetGSE7x11Bold returns the GSE 7x11 bold pixel bitmap font data
// TODO: Implement GSE7x11_bold font data
func GetGSE7x11Bold() []byte {
	// For now, return GSE5x7 as placeholder
	return GetGSE5x7()
}

// GetGSE7x15 returns the GSE 7x15 pixel bitmap font data
// TODO: Implement GSE7x15 font data
func GetGSE7x15() []byte {
	// For now, return GSE5x7 as placeholder
	return GetGSE5x7()
}

// GetGSE7x15Bold returns the GSE 7x15 bold pixel bitmap font data
// TODO: Implement GSE7x15_bold font data
func GetGSE7x15Bold() []byte {
	// For now, return GSE5x7 as placeholder
	return GetGSE5x7()
}

// GetGSE8x16 returns the GSE 8x16 pixel bitmap font data
// TODO: Implement GSE8x16 font data
func GetGSE8x16() []byte {
	// For now, return GSE5x7 as placeholder
	return GetGSE5x7()
}

// GetGSE8x16Bold returns the GSE 8x16 bold pixel bitmap font data
// TODO: Implement GSE8x16_bold font data
func GetGSE8x16Bold() []byte {
	// For now, return GSE5x7 as placeholder
	return GetGSE5x7()
}

// GetMCS5x10Mono returns the MCS 5x10 monospace bitmap font data
func GetMCS5x10Mono() []byte {
	// Return a copy to prevent modification of the original data
	result := make([]byte, len(MCS5x10Mono))
	copy(result, MCS5x10Mono)
	return result
}

// GetMCS5x11Mono returns the MCS 5x11 monospace bitmap font data
// TODO: Implement MCS5x11_mono font data
func GetMCS5x11Mono() []byte {
	// For now, return MCS5x10Mono as placeholder
	return GetMCS5x10Mono()
}

// GetMCS6x10Mono returns the MCS 6x10 monospace bitmap font data
// TODO: Implement MCS6x10_mono font data
func GetMCS6x10Mono() []byte {
	// For now, return MCS5x10Mono as placeholder
	return GetMCS5x10Mono()
}

// GetMCS6x11Mono returns the MCS 6x11 monospace bitmap font data
// TODO: Implement MCS6x11_mono font data
func GetMCS6x11Mono() []byte {
	// For now, return MCS5x10Mono as placeholder
	return GetMCS5x10Mono()
}

// GetMCS7x12MonoHigh returns the MCS 7x12 monospace high bitmap font data
// TODO: Implement MCS7x12_mono_high font data
func GetMCS7x12MonoHigh() []byte {
	// For now, return MCS5x10Mono as placeholder
	return GetMCS5x10Mono()
}

// GetMCS7x12MonoLow returns the MCS 7x12 monospace low bitmap font data
// TODO: Implement MCS7x12_mono_low font data
func GetMCS7x12MonoLow() []byte {
	// For now, return MCS5x10Mono as placeholder
	return GetMCS5x10Mono()
}

// GetMCS11Prop returns the MCS 11pt proportional bitmap font data
// TODO: Implement MCS11_prop font data
func GetMCS11Prop() []byte {
	// For now, return MCS5x10Mono as placeholder
	return GetMCS5x10Mono()
}

// GetMCS11PropCondensed returns the MCS 11pt proportional condensed bitmap font data
// TODO: Implement MCS11_prop_condensed font data
func GetMCS11PropCondensed() []byte {
	// For now, return MCS5x10Mono as placeholder
	return GetMCS5x10Mono()
}

// GetMCS12Prop returns the MCS 12pt proportional bitmap font data
// TODO: Implement MCS12_prop font data
func GetMCS12Prop() []byte {
	// For now, return MCS5x10Mono as placeholder
	return GetMCS5x10Mono()
}

// GetMCS13Prop returns the MCS 13pt proportional bitmap font data
// TODO: Implement MCS13_prop font data
func GetMCS13Prop() []byte {
	// For now, return MCS5x10Mono as placeholder
	return GetMCS5x10Mono()
}

// GetVerdana12 returns the Verdana 12pt bitmap font data
func GetVerdana12() []byte {
	// Return a copy to prevent modification of the original data
	result := make([]byte, len(Verdana12))
	copy(result, Verdana12)
	return result
}

// GetVerdana12Bold returns the Verdana 12pt bold bitmap font data
// TODO: Implement Verdana12_bold font data
func GetVerdana12Bold() []byte {
	// For now, return Verdana12 as placeholder
	return GetVerdana12()
}

// GetVerdana13 returns the Verdana 13pt bitmap font data
// TODO: Implement Verdana13 font data
func GetVerdana13() []byte {
	// For now, return Verdana12 as placeholder
	return GetVerdana12()
}

// GetVerdana13Bold returns the Verdana 13pt bold bitmap font data
// TODO: Implement Verdana13_bold font data
func GetVerdana13Bold() []byte {
	// For now, return Verdana12 as placeholder
	return GetVerdana12()
}

// GetVerdana14 returns the Verdana 14pt bitmap font data
// TODO: Implement Verdana14 font data
func GetVerdana14() []byte {
	// For now, return Verdana12 as placeholder
	return GetVerdana12()
}

// GetVerdana14Bold returns the Verdana 14pt bold bitmap font data
// TODO: Implement Verdana14_bold font data
func GetVerdana14Bold() []byte {
	// For now, return Verdana12 as placeholder
	return GetVerdana12()
}

// GetVerdana16 returns the Verdana 16pt bitmap font data
// TODO: Implement Verdana16 font data
func GetVerdana16() []byte {
	// For now, return Verdana12 as placeholder
	return GetVerdana12()
}

// GetVerdana16Bold returns the Verdana 16pt bold bitmap font data
// TODO: Implement Verdana16_bold font data
func GetVerdana16Bold() []byte {
	// For now, return Verdana12 as placeholder
	return GetVerdana12()
}

// GetVerdana17 returns the Verdana 17pt bitmap font data
// TODO: Implement Verdana17 font data
func GetVerdana17() []byte {
	// For now, return Verdana12 as placeholder
	return GetVerdana12()
}

// GetVerdana17Bold returns the Verdana 17pt bold bitmap font data
// TODO: Implement Verdana17_bold font data
func GetVerdana17Bold() []byte {
	// For now, return Verdana12 as placeholder
	return GetVerdana12()
}

// GetVerdana18 returns the Verdana 18pt bitmap font data
// TODO: Implement Verdana18 font data
func GetVerdana18() []byte {
	// For now, return Verdana12 as placeholder
	return GetVerdana12()
}

// GetVerdana18Bold returns the Verdana 18pt bold bitmap font data
// TODO: Implement Verdana18_bold font data
func GetVerdana18Bold() []byte {
	// For now, return Verdana12 as placeholder
	return GetVerdana12()
}

// GetSimple4x6Font returns the simple 4x6 bitmap font data
// Deprecated: Use GetGSE4x6() instead for full AGG compatibility
func GetSimple4x6Font() []byte {
	// Return a minimal compatible font for backward compatibility
	return []byte{
		6,  // height
		5,  // baseline
		65, // start char ('A')
		3,  // num chars (A, B, C)
		// Character offset table (2 bytes per character, little endian)
		0x00, 0x00, // A offset
		0x07, 0x00, // B offset
		0x0E, 0x00, // C offset
		// Bitmap data
		3, 0x60, 0xA0, 0xE0, 0xA0, 0xA0, 0x00, // A
		3, 0xC0, 0xA0, 0xC0, 0xA0, 0xC0, 0x00, // B
		3, 0x60, 0x80, 0x80, 0x80, 0x60, 0x00, // C
	}
}
